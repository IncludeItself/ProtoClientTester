// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_proto.proto

#include "data_proto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace data {
PROTOBUF_CONSTEXPR RequestHeader::RequestHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auth_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestHeaderDefaultTypeInternal() {}
  union {
    RequestHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestHeaderDefaultTypeInternal _RequestHeader_default_instance_;
PROTOBUF_CONSTEXPR ResponseHeader::ResponseHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseHeaderDefaultTypeInternal() {}
  union {
    ResponseHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseHeaderDefaultTypeInternal _ResponseHeader_default_instance_;
PROTOBUF_CONSTEXPR MessageFrame::MessageFrame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.body_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MessageFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageFrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageFrameDefaultTypeInternal() {}
  union {
    MessageFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageFrameDefaultTypeInternal _MessageFrame_default_instance_;
PROTOBUF_CONSTEXPR LoginRequest::LoginRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginRequestDefaultTypeInternal() {}
  union {
    LoginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
PROTOBUF_CONSTEXPR LoginResponse::LoginResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.expire_time_)*/uint64_t{0u}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.user_role_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginResponseDefaultTypeInternal() {}
  union {
    LoginResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
PROTOBUF_CONSTEXPR Heartbeat::Heartbeat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connection_status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_active_time_)*/uint64_t{0u}
  , /*decltype(_impl_.server_time_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartbeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatDefaultTypeInternal() {}
  union {
    Heartbeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
PROTOBUF_CONSTEXPR ErrorResponse::ErrorResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.detail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.solution_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ErrorCode_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ErrorResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorResponseDefaultTypeInternal() {}
  union {
    ErrorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorResponseDefaultTypeInternal _ErrorResponse_default_instance_;
PROTOBUF_CONSTEXPR Notification::Notification(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.need_ack_)*/false
  , /*decltype(_impl_.create_time_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotificationDefaultTypeInternal() {}
  union {
    Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotificationDefaultTypeInternal _Notification_default_instance_;
PROTOBUF_CONSTEXPR BatchRequest::BatchRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sub_requests_)*/{}
  , /*decltype(_impl_.need_atomic_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchRequestDefaultTypeInternal() {}
  union {
    BatchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchRequestDefaultTypeInternal _BatchRequest_default_instance_;
PROTOBUF_CONSTEXPR SaveSourceCodeRequest_MetadataEntry_DoNotUse::SaveSourceCodeRequest_MetadataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SaveSourceCodeRequest_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SaveSourceCodeRequest_MetadataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SaveSourceCodeRequest_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SaveSourceCodeRequest_MetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SaveSourceCodeRequest_MetadataEntry_DoNotUseDefaultTypeInternal _SaveSourceCodeRequest_MetadataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SaveSourceCodeRequest::SaveSourceCodeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.code_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SaveSourceCodeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SaveSourceCodeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SaveSourceCodeRequestDefaultTypeInternal() {}
  union {
    SaveSourceCodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SaveSourceCodeRequestDefaultTypeInternal _SaveSourceCodeRequest_default_instance_;
PROTOBUF_CONSTEXPR SaveSourceCodeResponse::SaveSourceCodeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.save_time_)*/uint64_t{0u}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SaveSourceCodeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SaveSourceCodeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SaveSourceCodeResponseDefaultTypeInternal() {}
  union {
    SaveSourceCodeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SaveSourceCodeResponseDefaultTypeInternal _SaveSourceCodeResponse_default_instance_;
PROTOBUF_CONSTEXPR CompileSourceCodeRequest::CompileSourceCodeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.compiler_options_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_ir_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optimize_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompileSourceCodeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompileSourceCodeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompileSourceCodeRequestDefaultTypeInternal() {}
  union {
    CompileSourceCodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompileSourceCodeRequestDefaultTypeInternal _CompileSourceCodeRequest_default_instance_;
PROTOBUF_CONSTEXPR CompileSourceCodeResponse::CompileSourceCodeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.warnings_)*/{}
  , /*decltype(_impl_.ir_code_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.compile_duration_)*/0u
  , /*decltype(_impl_.compile_time_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompileSourceCodeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompileSourceCodeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompileSourceCodeResponseDefaultTypeInternal() {}
  union {
    CompileSourceCodeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompileSourceCodeResponseDefaultTypeInternal _CompileSourceCodeResponse_default_instance_;
PROTOBUF_CONSTEXPR ExecuteIRCodeRequest_ParametersEntry_DoNotUse::ExecuteIRCodeRequest_ParametersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ExecuteIRCodeRequest_ParametersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteIRCodeRequest_ParametersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteIRCodeRequest_ParametersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ExecuteIRCodeRequest_ParametersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteIRCodeRequest_ParametersEntry_DoNotUseDefaultTypeInternal _ExecuteIRCodeRequest_ParametersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ExecuteIRCodeRequest::ExecuteIRCodeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parameters_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.ir_code_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_.timeout_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecuteIRCodeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteIRCodeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteIRCodeRequestDefaultTypeInternal() {}
  union {
    ExecuteIRCodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteIRCodeRequestDefaultTypeInternal _ExecuteIRCodeRequest_default_instance_;
PROTOBUF_CONSTEXPR ExecuteIRCodeResponse::ExecuteIRCodeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.execution_result_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.execution_mode_used_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.execution_duration_)*/0u
  , /*decltype(_impl_.start_time_)*/uint64_t{0u}
  , /*decltype(_impl_.end_time_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecuteIRCodeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteIRCodeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteIRCodeResponseDefaultTypeInternal() {}
  union {
    ExecuteIRCodeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteIRCodeResponseDefaultTypeInternal _ExecuteIRCodeResponse_default_instance_;
}  // namespace data
static ::_pb::Metadata file_level_metadata_data_5fproto_2eproto[17];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_data_5fproto_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_data_5fproto_2eproto = nullptr;

const uint32_t TableStruct_data_5fproto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data::RequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::data::RequestHeader, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::data::RequestHeader, _impl_.client_id_),
  PROTOBUF_FIELD_OFFSET(::data::RequestHeader, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::data::RequestHeader, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::data::RequestHeader, _impl_.auth_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data::ResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::data::ResponseHeader, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::data::ResponseHeader, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::data::ResponseHeader, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::data::ResponseHeader, _impl_.error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data::MessageFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::data::MessageFrame, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::data::MessageFrame, _impl_.header_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::data::MessageFrame, _impl_.body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data::LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::data::LoginRequest, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::data::LoginRequest, _impl_.password_hash_),
  PROTOBUF_FIELD_OFFSET(::data::LoginRequest, _impl_.device_info_),
  PROTOBUF_FIELD_OFFSET(::data::LoginRequest, _impl_.app_version_),
  PROTOBUF_FIELD_OFFSET(::data::LoginRequest, _impl_.token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data::LoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::data::LoginResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::data::LoginResponse, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::data::LoginResponse, _impl_.expire_time_),
  PROTOBUF_FIELD_OFFSET(::data::LoginResponse, _impl_.user_nickname_),
  PROTOBUF_FIELD_OFFSET(::data::LoginResponse, _impl_.user_role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data::Heartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::data::Heartbeat, _impl_.last_active_time_),
  PROTOBUF_FIELD_OFFSET(::data::Heartbeat, _impl_.server_time_),
  PROTOBUF_FIELD_OFFSET(::data::Heartbeat, _impl_.connection_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data::ErrorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::data::ErrorResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::data::ErrorResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::data::ErrorResponse, _impl_.detail_),
  PROTOBUF_FIELD_OFFSET(::data::ErrorResponse, _impl_.solution_),
  PROTOBUF_FIELD_OFFSET(::data::ErrorResponse, _impl_.request_type_),
  PROTOBUF_FIELD_OFFSET(::data::ErrorResponse, _impl_.ErrorCode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data::Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::data::Notification, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::data::Notification, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::data::Notification, _impl_.create_time_),
  PROTOBUF_FIELD_OFFSET(::data::Notification, _impl_.need_ack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data::BatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::data::BatchRequest, _impl_.sub_requests_),
  PROTOBUF_FIELD_OFFSET(::data::BatchRequest, _impl_.need_atomic_),
  PROTOBUF_FIELD_OFFSET(::data::SaveSourceCodeRequest_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::data::SaveSourceCodeRequest_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::data::SaveSourceCodeRequest_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::data::SaveSourceCodeRequest_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data::SaveSourceCodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::data::SaveSourceCodeRequest, _impl_.code_id_),
  PROTOBUF_FIELD_OFFSET(::data::SaveSourceCodeRequest, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::data::SaveSourceCodeRequest, _impl_.source_code_),
  PROTOBUF_FIELD_OFFSET(::data::SaveSourceCodeRequest, _impl_.code_name_),
  PROTOBUF_FIELD_OFFSET(::data::SaveSourceCodeRequest, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::data::SaveSourceCodeRequest, _impl_.metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data::SaveSourceCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::data::SaveSourceCodeResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::data::SaveSourceCodeResponse, _impl_.code_id_),
  PROTOBUF_FIELD_OFFSET(::data::SaveSourceCodeResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::data::SaveSourceCodeResponse, _impl_.save_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data::CompileSourceCodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::data::CompileSourceCodeRequest, _impl_.code_id_),
  PROTOBUF_FIELD_OFFSET(::data::CompileSourceCodeRequest, _impl_.compiler_options_),
  PROTOBUF_FIELD_OFFSET(::data::CompileSourceCodeRequest, _impl_.optimize_),
  PROTOBUF_FIELD_OFFSET(::data::CompileSourceCodeRequest, _impl_.target_ir_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data::CompileSourceCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::data::CompileSourceCodeResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::data::CompileSourceCodeResponse, _impl_.ir_code_id_),
  PROTOBUF_FIELD_OFFSET(::data::CompileSourceCodeResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::data::CompileSourceCodeResponse, _impl_.compile_time_),
  PROTOBUF_FIELD_OFFSET(::data::CompileSourceCodeResponse, _impl_.compile_duration_),
  PROTOBUF_FIELD_OFFSET(::data::CompileSourceCodeResponse, _impl_.warnings_),
  PROTOBUF_FIELD_OFFSET(::data::ExecuteIRCodeRequest_ParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::data::ExecuteIRCodeRequest_ParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::data::ExecuteIRCodeRequest_ParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::data::ExecuteIRCodeRequest_ParametersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data::ExecuteIRCodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::data::ExecuteIRCodeRequest, _impl_.ir_code_id_),
  PROTOBUF_FIELD_OFFSET(::data::ExecuteIRCodeRequest, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::data::ExecuteIRCodeRequest, _impl_.parameters_),
  PROTOBUF_FIELD_OFFSET(::data::ExecuteIRCodeRequest, _impl_.timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data::ExecuteIRCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::data::ExecuteIRCodeResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::data::ExecuteIRCodeResponse, _impl_.execution_result_),
  PROTOBUF_FIELD_OFFSET(::data::ExecuteIRCodeResponse, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::data::ExecuteIRCodeResponse, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::data::ExecuteIRCodeResponse, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::data::ExecuteIRCodeResponse, _impl_.execution_duration_),
  PROTOBUF_FIELD_OFFSET(::data::ExecuteIRCodeResponse, _impl_.execution_mode_used_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::data::RequestHeader)},
  { 11, -1, -1, sizeof(::data::ResponseHeader)},
  { 21, -1, -1, sizeof(::data::MessageFrame)},
  { 41, -1, -1, sizeof(::data::LoginRequest)},
  { 52, -1, -1, sizeof(::data::LoginResponse)},
  { 63, -1, -1, sizeof(::data::Heartbeat)},
  { 72, -1, -1, sizeof(::data::ErrorResponse)},
  { 85, -1, -1, sizeof(::data::Notification)},
  { 95, -1, -1, sizeof(::data::BatchRequest)},
  { 103, 111, -1, sizeof(::data::SaveSourceCodeRequest_MetadataEntry_DoNotUse)},
  { 113, -1, -1, sizeof(::data::SaveSourceCodeRequest)},
  { 125, -1, -1, sizeof(::data::SaveSourceCodeResponse)},
  { 135, -1, -1, sizeof(::data::CompileSourceCodeRequest)},
  { 145, -1, -1, sizeof(::data::CompileSourceCodeResponse)},
  { 157, 165, -1, sizeof(::data::ExecuteIRCodeRequest_ParametersEntry_DoNotUse)},
  { 167, -1, -1, sizeof(::data::ExecuteIRCodeRequest)},
  { 177, -1, -1, sizeof(::data::ExecuteIRCodeResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::data::_RequestHeader_default_instance_._instance,
  &::data::_ResponseHeader_default_instance_._instance,
  &::data::_MessageFrame_default_instance_._instance,
  &::data::_LoginRequest_default_instance_._instance,
  &::data::_LoginResponse_default_instance_._instance,
  &::data::_Heartbeat_default_instance_._instance,
  &::data::_ErrorResponse_default_instance_._instance,
  &::data::_Notification_default_instance_._instance,
  &::data::_BatchRequest_default_instance_._instance,
  &::data::_SaveSourceCodeRequest_MetadataEntry_DoNotUse_default_instance_._instance,
  &::data::_SaveSourceCodeRequest_default_instance_._instance,
  &::data::_SaveSourceCodeResponse_default_instance_._instance,
  &::data::_CompileSourceCodeRequest_default_instance_._instance,
  &::data::_CompileSourceCodeResponse_default_instance_._instance,
  &::data::_ExecuteIRCodeRequest_ParametersEntry_DoNotUse_default_instance_._instance,
  &::data::_ExecuteIRCodeRequest_default_instance_._instance,
  &::data::_ExecuteIRCodeResponse_default_instance_._instance,
};

const char descriptor_table_protodef_data_5fproto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020data_proto.proto\022\004data\032\027error_code/com"
  "mon.proto\032\030error_code/network.proto\"~\n\rR"
  "equestHeader\022\022\n\nrequest_id\030\001 \001(\t\022\021\n\tclie"
  "nt_id\030\002 \001(\t\022\021\n\ttimestamp\030\003 \001(\003\022\037\n\004type\030\004"
  " \001(\0162\021.data.RequestType\022\022\n\nauth_token\030\005 "
  "\001(\t\"p\n\016ResponseHeader\022\022\n\nrequest_id\030\001 \001("
  "\t\022\021\n\ttimestamp\030\002 \001(\003\022 \n\006status\030\003 \001(\0162\020.d"
  "ata.StatusCode\022\025\n\rerror_message\030\004 \001(\t\"\245\005"
  "\n\014MessageFrame\022#\n\006header\030\001 \001(\0132\023.data.Re"
  "questHeader\022+\n\rlogin_request\030\002 \001(\0132\022.dat"
  "a.LoginRequestH\000\022-\n\016login_response\030\003 \001(\013"
  "2\023.data.LoginResponseH\000\022$\n\theartbeat\030\004 \001"
  "(\0132\017.data.HeartbeatH\000\022-\n\016error_response\030"
  "\005 \001(\0132\023.data.ErrorResponseH\000\022*\n\014notifica"
  "tion\030\006 \001(\0132\022.data.NotificationH\000\022#\n\005batc"
  "h\030\007 \001(\0132\022.data.BatchRequestH\000\022:\n\023save_so"
  "urce_request\030\010 \001(\0132\033.data.SaveSourceCode"
  "RequestH\000\022<\n\024save_source_response\030\t \001(\0132"
  "\034.data.SaveSourceCodeResponseH\000\0229\n\017compi"
  "le_request\030\n \001(\0132\036.data.CompileSourceCod"
  "eRequestH\000\022;\n\020compile_response\030\013 \001(\0132\037.d"
  "ata.CompileSourceCodeResponseH\000\0228\n\022execu"
  "te_ir_request\030\014 \001(\0132\032.data.ExecuteIRCode"
  "RequestH\000\022:\n\023execute_ir_response\030\r \001(\0132\033"
  ".data.ExecuteIRCodeResponseH\000B\006\n\004body\"p\n"
  "\014LoginRequest\022\020\n\010username\030\001 \001(\t\022\025\n\rpassw"
  "ord_hash\030\002 \001(\t\022\023\n\013device_info\030\003 \001(\t\022\023\n\013a"
  "pp_version\030\004 \001(\t\022\r\n\005token\030\005 \001(\t\"s\n\rLogin"
  "Response\022\017\n\007success\030\001 \001(\010\022\022\n\nsession_id\030"
  "\002 \001(\t\022\023\n\013expire_time\030\003 \001(\004\022\025\n\ruser_nickn"
  "ame\030\004 \001(\t\022\021\n\tuser_role\030\005 \001(\r\"U\n\tHeartbea"
  "t\022\030\n\020last_active_time\030\001 \001(\004\022\023\n\013server_ti"
  "me\030\002 \001(\004\022\031\n\021connection_status\030\003 \001(\t\"\273\001\n\r"
  "ErrorResponse\022(\n\013common_code\030\001 \001(\0162\021.com"
  "mon.ErrorCodeH\000\022*\n\014network_code\030\002 \001(\0162\022."
  "network.ErrorCodeH\000\022\017\n\007message\030\r \001(\t\022\016\n\006"
  "detail\030\003 \001(\t\022\020\n\010solution\030\004 \001(\t\022\024\n\014reques"
  "t_type\030\005 \001(\tB\013\n\tErrorCode\"\307\001\n\014Notificati"
  "on\022+\n\004type\030\001 \001(\0162\035.data.Notification.Not"
  "ifyType\022\017\n\007content\030\002 \001(\t\022\023\n\013create_time\030"
  "\003 \001(\004\022\020\n\010need_ack\030\004 \001(\010\"R\n\nNotifyType\022\027\n"
  "\023SYSTEM_ANNOUNCEMENT\020\000\022\027\n\023ORDER_STATUS_C"
  "HANGE\020\001\022\022\n\016FRIEND_REQUEST\020\002\"M\n\014BatchRequ"
  "est\022(\n\014sub_requests\030\001 \003(\0132\022.data.Message"
  "Frame\022\023\n\013need_atomic\030\002 \001(\010\"\345\001\n\025SaveSourc"
  "eCodeRequest\022\017\n\007code_id\030\001 \001(\t\022\020\n\010languag"
  "e\030\002 \001(\t\022\023\n\013source_code\030\003 \001(\t\022\021\n\tcode_nam"
  "e\030\004 \001(\t\022\023\n\013description\030\005 \001(\t\022;\n\010metadata"
  "\030\006 \003(\0132).data.SaveSourceCodeRequest.Meta"
  "dataEntry\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\t:\0028\001\"^\n\026SaveSourceCodeResp"
  "onse\022\017\n\007success\030\001 \001(\010\022\017\n\007code_id\030\002 \001(\t\022\017"
  "\n\007message\030\003 \001(\t\022\021\n\tsave_time\030\004 \001(\004\"r\n\030Co"
  "mpileSourceCodeRequest\022\017\n\007code_id\030\001 \001(\t\022"
  "\030\n\020compiler_options\030\002 \001(\t\022\020\n\010optimize\030\003 "
  "\001(\010\022\031\n\021target_ir_version\030\004 \001(\t\"\223\001\n\031Compi"
  "leSourceCodeResponse\022\017\n\007success\030\001 \001(\010\022\022\n"
  "\nir_code_id\030\002 \001(\t\022\017\n\007message\030\003 \001(\t\022\024\n\014co"
  "mpile_time\030\004 \001(\004\022\030\n\020compile_duration\030\005 \001"
  "(\r\022\020\n\010warnings\030\006 \003(\t\"\231\002\n\024ExecuteIRCodeRe"
  "quest\022\022\n\nir_code_id\030\001 \001(\t\0226\n\004mode\030\002 \001(\0162"
  "(.data.ExecuteIRCodeRequest.ExecutionMod"
  "e\022>\n\nparameters\030\003 \003(\0132*.data.ExecuteIRCo"
  "deRequest.ParametersEntry\022\017\n\007timeout\030\004 \001"
  "(\r\0321\n\017ParametersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\t:\0028\001\"1\n\rExecutionMode\022\007\n\003JIT\020\000\022"
  "\r\n\tINTERPRET\020\001\022\010\n\004BOTH\020\002\"\270\001\n\025ExecuteIRCo"
  "deResponse\022\017\n\007success\030\001 \001(\010\022\030\n\020execution"
  "_result\030\002 \001(\t\022\025\n\rerror_message\030\003 \001(\t\022\022\n\n"
  "start_time\030\004 \001(\004\022\020\n\010end_time\030\005 \001(\004\022\032\n\022ex"
  "ecution_duration\030\006 \001(\r\022\033\n\023execution_mode"
  "_used\030\007 \001(\t*\260\002\n\013RequestType\022\013\n\007UNKNOWN\020\000"
  "\022\021\n\rLOGIN_REQUEST\020\001\022\022\n\016LOGIN_RESPONSE\020\002\022"
  "\r\n\tHEARTBEAT\020\003\022\022\n\016ERROR_RESPONSE\020\004\022\020\n\014NO"
  "TIFICATION\020\005\022\021\n\rBATCH_REQUEST\020\006\022\034\n\030SAVE_"
  "SOURCE_CODE_REQUEST\020\007\022\035\n\031SAVE_SOURCE_COD"
  "E_RESPONSE\020\010\022\032\n\026COMPILE_SOURCE_REQUEST\020\t"
  "\022\033\n\027COMPILE_SOURCE_RESPONSE\020\n\022\026\n\022EXECUTE"
  "_IR_REQUEST\020\013\022\027\n\023EXECUTE_IR_RESPONSE\020\014*\224"
  "\001\n\nStatusCode\022\013\n\007SUCCESS\020\000\022\017\n\013BAD_REQUES"
  "T\020\001\022\020\n\014UNAUTHORIZED\020\002\022\r\n\tFORBIDDEN\020\003\022\r\n\t"
  "NOT_FOUND\020\004\022\022\n\016INTERNAL_ERROR\020\005\022\027\n\023SERVI"
  "CE_UNAVAILABLE\020\006\022\013\n\007TIMEOUT\020\007b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_data_5fproto_2eproto_deps[2] = {
  &::descriptor_table_error_5fcode_2fcommon_2eproto,
  &::descriptor_table_error_5fcode_2fnetwork_2eproto,
};
static ::_pbi::once_flag descriptor_table_data_5fproto_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_data_5fproto_2eproto = {
    false, false, 3317, descriptor_table_protodef_data_5fproto_2eproto,
    "data_proto.proto",
    &descriptor_table_data_5fproto_2eproto_once, descriptor_table_data_5fproto_2eproto_deps, 2, 17,
    schemas, file_default_instances, TableStruct_data_5fproto_2eproto::offsets,
    file_level_metadata_data_5fproto_2eproto, file_level_enum_descriptors_data_5fproto_2eproto,
    file_level_service_descriptors_data_5fproto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_data_5fproto_2eproto_getter() {
  return &descriptor_table_data_5fproto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_data_5fproto_2eproto(&descriptor_table_data_5fproto_2eproto);
namespace data {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Notification_NotifyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_data_5fproto_2eproto);
  return file_level_enum_descriptors_data_5fproto_2eproto[0];
}
bool Notification_NotifyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Notification_NotifyType Notification::SYSTEM_ANNOUNCEMENT;
constexpr Notification_NotifyType Notification::ORDER_STATUS_CHANGE;
constexpr Notification_NotifyType Notification::FRIEND_REQUEST;
constexpr Notification_NotifyType Notification::NotifyType_MIN;
constexpr Notification_NotifyType Notification::NotifyType_MAX;
constexpr int Notification::NotifyType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExecuteIRCodeRequest_ExecutionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_data_5fproto_2eproto);
  return file_level_enum_descriptors_data_5fproto_2eproto[1];
}
bool ExecuteIRCodeRequest_ExecutionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ExecuteIRCodeRequest_ExecutionMode ExecuteIRCodeRequest::JIT;
constexpr ExecuteIRCodeRequest_ExecutionMode ExecuteIRCodeRequest::INTERPRET;
constexpr ExecuteIRCodeRequest_ExecutionMode ExecuteIRCodeRequest::BOTH;
constexpr ExecuteIRCodeRequest_ExecutionMode ExecuteIRCodeRequest::ExecutionMode_MIN;
constexpr ExecuteIRCodeRequest_ExecutionMode ExecuteIRCodeRequest::ExecutionMode_MAX;
constexpr int ExecuteIRCodeRequest::ExecutionMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_data_5fproto_2eproto);
  return file_level_enum_descriptors_data_5fproto_2eproto[2];
}
bool RequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_data_5fproto_2eproto);
  return file_level_enum_descriptors_data_5fproto_2eproto[3];
}
bool StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RequestHeader::_Internal {
 public:
};

RequestHeader::RequestHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:data.RequestHeader)
}
RequestHeader::RequestHeader(const RequestHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.client_id_){}
    , decltype(_impl_.auth_token_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.auth_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_token().empty()) {
    _this->_impl_.auth_token_.Set(from._internal_auth_token(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:data.RequestHeader)
}

inline void RequestHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.client_id_){}
    , decltype(_impl_.auth_token_){}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.auth_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestHeader::~RequestHeader() {
  // @@protoc_insertion_point(destructor:data.RequestHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.client_id_.Destroy();
  _impl_.auth_token_.Destroy();
}

void RequestHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:data.RequestHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.client_id_.ClearToEmpty();
  _impl_.auth_token_.ClearToEmpty();
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.RequestHeader.request_id"));
        } else
          goto handle_unusual;
        continue;
      // string client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.RequestHeader.client_id"));
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .data.RequestType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::data::RequestType>(val));
        } else
          goto handle_unusual;
        continue;
      // string auth_token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_auth_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.RequestHeader.auth_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.RequestHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.RequestHeader.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string client_id = 2;
  if (!this->_internal_client_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.RequestHeader.client_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_client_id(), target);
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // .data.RequestType type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // string auth_token = 5;
  if (!this->_internal_auth_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_token().data(), static_cast<int>(this->_internal_auth_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.RequestHeader.auth_token");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_auth_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.RequestHeader)
  return target;
}

size_t RequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data.RequestHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string client_id = 2;
  if (!this->_internal_client_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string auth_token = 5;
  if (!this->_internal_auth_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_token());
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // .data.RequestType type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestHeader::GetClassData() const { return &_class_data_; }


void RequestHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestHeader*>(&to_msg);
  auto& from = static_cast<const RequestHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:data.RequestHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (!from._internal_auth_token().empty()) {
    _this->_internal_set_auth_token(from._internal_auth_token());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestHeader::CopyFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeader::IsInitialized() const {
  return true;
}

void RequestHeader::InternalSwap(RequestHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_id_, lhs_arena,
      &other->_impl_.client_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.auth_token_, lhs_arena,
      &other->_impl_.auth_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestHeader, _impl_.type_)
      + sizeof(RequestHeader::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(RequestHeader, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fproto_2eproto_getter, &descriptor_table_data_5fproto_2eproto_once,
      file_level_metadata_data_5fproto_2eproto[0]);
}

// ===================================================================

class ResponseHeader::_Internal {
 public:
};

ResponseHeader::ResponseHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:data.ResponseHeader)
}
ResponseHeader::ResponseHeader(const ResponseHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:data.ResponseHeader)
}

inline void ResponseHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseHeader::~ResponseHeader() {
  // @@protoc_insertion_point(destructor:data.ResponseHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.error_message_.Destroy();
}

void ResponseHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:data.ResponseHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.ResponseHeader.request_id"));
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .data.StatusCode status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::data::StatusCode>(val));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.ResponseHeader.error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.ResponseHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.ResponseHeader.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // .data.StatusCode status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.ResponseHeader.error_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.ResponseHeader)
  return target;
}

size_t ResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data.ResponseHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // .data.StatusCode status = 3;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseHeader::GetClassData() const { return &_class_data_; }


void ResponseHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseHeader*>(&to_msg);
  auto& from = static_cast<const ResponseHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:data.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseHeader::CopyFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeader::IsInitialized() const {
  return true;
}

void ResponseHeader::InternalSwap(ResponseHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseHeader, _impl_.status_)
      + sizeof(ResponseHeader::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(ResponseHeader, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fproto_2eproto_getter, &descriptor_table_data_5fproto_2eproto_once,
      file_level_metadata_data_5fproto_2eproto[1]);
}

// ===================================================================

class MessageFrame::_Internal {
 public:
  static const ::data::RequestHeader& header(const MessageFrame* msg);
  static const ::data::LoginRequest& login_request(const MessageFrame* msg);
  static const ::data::LoginResponse& login_response(const MessageFrame* msg);
  static const ::data::Heartbeat& heartbeat(const MessageFrame* msg);
  static const ::data::ErrorResponse& error_response(const MessageFrame* msg);
  static const ::data::Notification& notification(const MessageFrame* msg);
  static const ::data::BatchRequest& batch(const MessageFrame* msg);
  static const ::data::SaveSourceCodeRequest& save_source_request(const MessageFrame* msg);
  static const ::data::SaveSourceCodeResponse& save_source_response(const MessageFrame* msg);
  static const ::data::CompileSourceCodeRequest& compile_request(const MessageFrame* msg);
  static const ::data::CompileSourceCodeResponse& compile_response(const MessageFrame* msg);
  static const ::data::ExecuteIRCodeRequest& execute_ir_request(const MessageFrame* msg);
  static const ::data::ExecuteIRCodeResponse& execute_ir_response(const MessageFrame* msg);
};

const ::data::RequestHeader&
MessageFrame::_Internal::header(const MessageFrame* msg) {
  return *msg->_impl_.header_;
}
const ::data::LoginRequest&
MessageFrame::_Internal::login_request(const MessageFrame* msg) {
  return *msg->_impl_.body_.login_request_;
}
const ::data::LoginResponse&
MessageFrame::_Internal::login_response(const MessageFrame* msg) {
  return *msg->_impl_.body_.login_response_;
}
const ::data::Heartbeat&
MessageFrame::_Internal::heartbeat(const MessageFrame* msg) {
  return *msg->_impl_.body_.heartbeat_;
}
const ::data::ErrorResponse&
MessageFrame::_Internal::error_response(const MessageFrame* msg) {
  return *msg->_impl_.body_.error_response_;
}
const ::data::Notification&
MessageFrame::_Internal::notification(const MessageFrame* msg) {
  return *msg->_impl_.body_.notification_;
}
const ::data::BatchRequest&
MessageFrame::_Internal::batch(const MessageFrame* msg) {
  return *msg->_impl_.body_.batch_;
}
const ::data::SaveSourceCodeRequest&
MessageFrame::_Internal::save_source_request(const MessageFrame* msg) {
  return *msg->_impl_.body_.save_source_request_;
}
const ::data::SaveSourceCodeResponse&
MessageFrame::_Internal::save_source_response(const MessageFrame* msg) {
  return *msg->_impl_.body_.save_source_response_;
}
const ::data::CompileSourceCodeRequest&
MessageFrame::_Internal::compile_request(const MessageFrame* msg) {
  return *msg->_impl_.body_.compile_request_;
}
const ::data::CompileSourceCodeResponse&
MessageFrame::_Internal::compile_response(const MessageFrame* msg) {
  return *msg->_impl_.body_.compile_response_;
}
const ::data::ExecuteIRCodeRequest&
MessageFrame::_Internal::execute_ir_request(const MessageFrame* msg) {
  return *msg->_impl_.body_.execute_ir_request_;
}
const ::data::ExecuteIRCodeResponse&
MessageFrame::_Internal::execute_ir_response(const MessageFrame* msg) {
  return *msg->_impl_.body_.execute_ir_response_;
}
void MessageFrame::set_allocated_login_request(::data::LoginRequest* login_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (login_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(login_request);
    if (message_arena != submessage_arena) {
      login_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_request, submessage_arena);
    }
    set_has_login_request();
    _impl_.body_.login_request_ = login_request;
  }
  // @@protoc_insertion_point(field_set_allocated:data.MessageFrame.login_request)
}
void MessageFrame::set_allocated_login_response(::data::LoginResponse* login_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (login_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(login_response);
    if (message_arena != submessage_arena) {
      login_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_response, submessage_arena);
    }
    set_has_login_response();
    _impl_.body_.login_response_ = login_response;
  }
  // @@protoc_insertion_point(field_set_allocated:data.MessageFrame.login_response)
}
void MessageFrame::set_allocated_heartbeat(::data::Heartbeat* heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(heartbeat);
    if (message_arena != submessage_arena) {
      heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    set_has_heartbeat();
    _impl_.body_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:data.MessageFrame.heartbeat)
}
void MessageFrame::set_allocated_error_response(::data::ErrorResponse* error_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (error_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(error_response);
    if (message_arena != submessage_arena) {
      error_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_response, submessage_arena);
    }
    set_has_error_response();
    _impl_.body_.error_response_ = error_response;
  }
  // @@protoc_insertion_point(field_set_allocated:data.MessageFrame.error_response)
}
void MessageFrame::set_allocated_notification(::data::Notification* notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(notification);
    if (message_arena != submessage_arena) {
      notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notification, submessage_arena);
    }
    set_has_notification();
    _impl_.body_.notification_ = notification;
  }
  // @@protoc_insertion_point(field_set_allocated:data.MessageFrame.notification)
}
void MessageFrame::set_allocated_batch(::data::BatchRequest* batch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (batch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(batch);
    if (message_arena != submessage_arena) {
      batch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batch, submessage_arena);
    }
    set_has_batch();
    _impl_.body_.batch_ = batch;
  }
  // @@protoc_insertion_point(field_set_allocated:data.MessageFrame.batch)
}
void MessageFrame::set_allocated_save_source_request(::data::SaveSourceCodeRequest* save_source_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (save_source_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(save_source_request);
    if (message_arena != submessage_arena) {
      save_source_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, save_source_request, submessage_arena);
    }
    set_has_save_source_request();
    _impl_.body_.save_source_request_ = save_source_request;
  }
  // @@protoc_insertion_point(field_set_allocated:data.MessageFrame.save_source_request)
}
void MessageFrame::set_allocated_save_source_response(::data::SaveSourceCodeResponse* save_source_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (save_source_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(save_source_response);
    if (message_arena != submessage_arena) {
      save_source_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, save_source_response, submessage_arena);
    }
    set_has_save_source_response();
    _impl_.body_.save_source_response_ = save_source_response;
  }
  // @@protoc_insertion_point(field_set_allocated:data.MessageFrame.save_source_response)
}
void MessageFrame::set_allocated_compile_request(::data::CompileSourceCodeRequest* compile_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (compile_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(compile_request);
    if (message_arena != submessage_arena) {
      compile_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compile_request, submessage_arena);
    }
    set_has_compile_request();
    _impl_.body_.compile_request_ = compile_request;
  }
  // @@protoc_insertion_point(field_set_allocated:data.MessageFrame.compile_request)
}
void MessageFrame::set_allocated_compile_response(::data::CompileSourceCodeResponse* compile_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (compile_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(compile_response);
    if (message_arena != submessage_arena) {
      compile_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compile_response, submessage_arena);
    }
    set_has_compile_response();
    _impl_.body_.compile_response_ = compile_response;
  }
  // @@protoc_insertion_point(field_set_allocated:data.MessageFrame.compile_response)
}
void MessageFrame::set_allocated_execute_ir_request(::data::ExecuteIRCodeRequest* execute_ir_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (execute_ir_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(execute_ir_request);
    if (message_arena != submessage_arena) {
      execute_ir_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execute_ir_request, submessage_arena);
    }
    set_has_execute_ir_request();
    _impl_.body_.execute_ir_request_ = execute_ir_request;
  }
  // @@protoc_insertion_point(field_set_allocated:data.MessageFrame.execute_ir_request)
}
void MessageFrame::set_allocated_execute_ir_response(::data::ExecuteIRCodeResponse* execute_ir_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (execute_ir_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(execute_ir_response);
    if (message_arena != submessage_arena) {
      execute_ir_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execute_ir_response, submessage_arena);
    }
    set_has_execute_ir_response();
    _impl_.body_.execute_ir_response_ = execute_ir_response;
  }
  // @@protoc_insertion_point(field_set_allocated:data.MessageFrame.execute_ir_response)
}
MessageFrame::MessageFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:data.MessageFrame)
}
MessageFrame::MessageFrame(const MessageFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageFrame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.body_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::data::RequestHeader(*from._impl_.header_);
  }
  clear_has_body();
  switch (from.body_case()) {
    case kLoginRequest: {
      _this->_internal_mutable_login_request()->::data::LoginRequest::MergeFrom(
          from._internal_login_request());
      break;
    }
    case kLoginResponse: {
      _this->_internal_mutable_login_response()->::data::LoginResponse::MergeFrom(
          from._internal_login_response());
      break;
    }
    case kHeartbeat: {
      _this->_internal_mutable_heartbeat()->::data::Heartbeat::MergeFrom(
          from._internal_heartbeat());
      break;
    }
    case kErrorResponse: {
      _this->_internal_mutable_error_response()->::data::ErrorResponse::MergeFrom(
          from._internal_error_response());
      break;
    }
    case kNotification: {
      _this->_internal_mutable_notification()->::data::Notification::MergeFrom(
          from._internal_notification());
      break;
    }
    case kBatch: {
      _this->_internal_mutable_batch()->::data::BatchRequest::MergeFrom(
          from._internal_batch());
      break;
    }
    case kSaveSourceRequest: {
      _this->_internal_mutable_save_source_request()->::data::SaveSourceCodeRequest::MergeFrom(
          from._internal_save_source_request());
      break;
    }
    case kSaveSourceResponse: {
      _this->_internal_mutable_save_source_response()->::data::SaveSourceCodeResponse::MergeFrom(
          from._internal_save_source_response());
      break;
    }
    case kCompileRequest: {
      _this->_internal_mutable_compile_request()->::data::CompileSourceCodeRequest::MergeFrom(
          from._internal_compile_request());
      break;
    }
    case kCompileResponse: {
      _this->_internal_mutable_compile_response()->::data::CompileSourceCodeResponse::MergeFrom(
          from._internal_compile_response());
      break;
    }
    case kExecuteIrRequest: {
      _this->_internal_mutable_execute_ir_request()->::data::ExecuteIRCodeRequest::MergeFrom(
          from._internal_execute_ir_request());
      break;
    }
    case kExecuteIrResponse: {
      _this->_internal_mutable_execute_ir_response()->::data::ExecuteIRCodeResponse::MergeFrom(
          from._internal_execute_ir_response());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:data.MessageFrame)
}

inline void MessageFrame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.body_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_body();
}

MessageFrame::~MessageFrame() {
  // @@protoc_insertion_point(destructor:data.MessageFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (has_body()) {
    clear_body();
  }
}

void MessageFrame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageFrame::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:data.MessageFrame)
  switch (body_case()) {
    case kLoginRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.body_.login_request_;
      }
      break;
    }
    case kLoginResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.body_.login_response_;
      }
      break;
    }
    case kHeartbeat: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.body_.heartbeat_;
      }
      break;
    }
    case kErrorResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.body_.error_response_;
      }
      break;
    }
    case kNotification: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.body_.notification_;
      }
      break;
    }
    case kBatch: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.body_.batch_;
      }
      break;
    }
    case kSaveSourceRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.body_.save_source_request_;
      }
      break;
    }
    case kSaveSourceResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.body_.save_source_response_;
      }
      break;
    }
    case kCompileRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.body_.compile_request_;
      }
      break;
    }
    case kCompileResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.body_.compile_response_;
      }
      break;
    }
    case kExecuteIrRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.body_.execute_ir_request_;
      }
      break;
    }
    case kExecuteIrResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.body_.execute_ir_response_;
      }
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = BODY_NOT_SET;
}


void MessageFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:data.MessageFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  clear_body();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .data.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .data.LoginRequest login_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .data.LoginResponse login_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .data.Heartbeat heartbeat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .data.ErrorResponse error_response = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_error_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .data.Notification notification = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .data.BatchRequest batch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_batch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .data.SaveSourceCodeRequest save_source_request = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_save_source_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .data.SaveSourceCodeResponse save_source_response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_save_source_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .data.CompileSourceCodeRequest compile_request = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_compile_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .data.CompileSourceCodeResponse compile_response = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_compile_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .data.ExecuteIRCodeRequest execute_ir_request = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_execute_ir_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .data.ExecuteIRCodeResponse execute_ir_response = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_execute_ir_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.MessageFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .data.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .data.LoginRequest login_request = 2;
  if (_internal_has_login_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::login_request(this),
        _Internal::login_request(this).GetCachedSize(), target, stream);
  }

  // .data.LoginResponse login_response = 3;
  if (_internal_has_login_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::login_response(this),
        _Internal::login_response(this).GetCachedSize(), target, stream);
  }

  // .data.Heartbeat heartbeat = 4;
  if (_internal_has_heartbeat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::heartbeat(this),
        _Internal::heartbeat(this).GetCachedSize(), target, stream);
  }

  // .data.ErrorResponse error_response = 5;
  if (_internal_has_error_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::error_response(this),
        _Internal::error_response(this).GetCachedSize(), target, stream);
  }

  // .data.Notification notification = 6;
  if (_internal_has_notification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::notification(this),
        _Internal::notification(this).GetCachedSize(), target, stream);
  }

  // .data.BatchRequest batch = 7;
  if (_internal_has_batch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::batch(this),
        _Internal::batch(this).GetCachedSize(), target, stream);
  }

  // .data.SaveSourceCodeRequest save_source_request = 8;
  if (_internal_has_save_source_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::save_source_request(this),
        _Internal::save_source_request(this).GetCachedSize(), target, stream);
  }

  // .data.SaveSourceCodeResponse save_source_response = 9;
  if (_internal_has_save_source_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::save_source_response(this),
        _Internal::save_source_response(this).GetCachedSize(), target, stream);
  }

  // .data.CompileSourceCodeRequest compile_request = 10;
  if (_internal_has_compile_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::compile_request(this),
        _Internal::compile_request(this).GetCachedSize(), target, stream);
  }

  // .data.CompileSourceCodeResponse compile_response = 11;
  if (_internal_has_compile_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::compile_response(this),
        _Internal::compile_response(this).GetCachedSize(), target, stream);
  }

  // .data.ExecuteIRCodeRequest execute_ir_request = 12;
  if (_internal_has_execute_ir_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::execute_ir_request(this),
        _Internal::execute_ir_request(this).GetCachedSize(), target, stream);
  }

  // .data.ExecuteIRCodeResponse execute_ir_response = 13;
  if (_internal_has_execute_ir_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::execute_ir_response(this),
        _Internal::execute_ir_response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.MessageFrame)
  return target;
}

size_t MessageFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data.MessageFrame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .data.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  switch (body_case()) {
    // .data.LoginRequest login_request = 2;
    case kLoginRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.body_.login_request_);
      break;
    }
    // .data.LoginResponse login_response = 3;
    case kLoginResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.body_.login_response_);
      break;
    }
    // .data.Heartbeat heartbeat = 4;
    case kHeartbeat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.body_.heartbeat_);
      break;
    }
    // .data.ErrorResponse error_response = 5;
    case kErrorResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.body_.error_response_);
      break;
    }
    // .data.Notification notification = 6;
    case kNotification: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.body_.notification_);
      break;
    }
    // .data.BatchRequest batch = 7;
    case kBatch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.body_.batch_);
      break;
    }
    // .data.SaveSourceCodeRequest save_source_request = 8;
    case kSaveSourceRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.body_.save_source_request_);
      break;
    }
    // .data.SaveSourceCodeResponse save_source_response = 9;
    case kSaveSourceResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.body_.save_source_response_);
      break;
    }
    // .data.CompileSourceCodeRequest compile_request = 10;
    case kCompileRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.body_.compile_request_);
      break;
    }
    // .data.CompileSourceCodeResponse compile_response = 11;
    case kCompileResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.body_.compile_response_);
      break;
    }
    // .data.ExecuteIRCodeRequest execute_ir_request = 12;
    case kExecuteIrRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.body_.execute_ir_request_);
      break;
    }
    // .data.ExecuteIRCodeResponse execute_ir_response = 13;
    case kExecuteIrResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.body_.execute_ir_response_);
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageFrame::GetClassData() const { return &_class_data_; }


void MessageFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageFrame*>(&to_msg);
  auto& from = static_cast<const MessageFrame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:data.MessageFrame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::data::RequestHeader::MergeFrom(
        from._internal_header());
  }
  switch (from.body_case()) {
    case kLoginRequest: {
      _this->_internal_mutable_login_request()->::data::LoginRequest::MergeFrom(
          from._internal_login_request());
      break;
    }
    case kLoginResponse: {
      _this->_internal_mutable_login_response()->::data::LoginResponse::MergeFrom(
          from._internal_login_response());
      break;
    }
    case kHeartbeat: {
      _this->_internal_mutable_heartbeat()->::data::Heartbeat::MergeFrom(
          from._internal_heartbeat());
      break;
    }
    case kErrorResponse: {
      _this->_internal_mutable_error_response()->::data::ErrorResponse::MergeFrom(
          from._internal_error_response());
      break;
    }
    case kNotification: {
      _this->_internal_mutable_notification()->::data::Notification::MergeFrom(
          from._internal_notification());
      break;
    }
    case kBatch: {
      _this->_internal_mutable_batch()->::data::BatchRequest::MergeFrom(
          from._internal_batch());
      break;
    }
    case kSaveSourceRequest: {
      _this->_internal_mutable_save_source_request()->::data::SaveSourceCodeRequest::MergeFrom(
          from._internal_save_source_request());
      break;
    }
    case kSaveSourceResponse: {
      _this->_internal_mutable_save_source_response()->::data::SaveSourceCodeResponse::MergeFrom(
          from._internal_save_source_response());
      break;
    }
    case kCompileRequest: {
      _this->_internal_mutable_compile_request()->::data::CompileSourceCodeRequest::MergeFrom(
          from._internal_compile_request());
      break;
    }
    case kCompileResponse: {
      _this->_internal_mutable_compile_response()->::data::CompileSourceCodeResponse::MergeFrom(
          from._internal_compile_response());
      break;
    }
    case kExecuteIrRequest: {
      _this->_internal_mutable_execute_ir_request()->::data::ExecuteIRCodeRequest::MergeFrom(
          from._internal_execute_ir_request());
      break;
    }
    case kExecuteIrResponse: {
      _this->_internal_mutable_execute_ir_response()->::data::ExecuteIRCodeResponse::MergeFrom(
          from._internal_execute_ir_response());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageFrame::CopyFrom(const MessageFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.MessageFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageFrame::IsInitialized() const {
  return true;
}

void MessageFrame::InternalSwap(MessageFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.header_, other->_impl_.header_);
  swap(_impl_.body_, other->_impl_.body_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageFrame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fproto_2eproto_getter, &descriptor_table_data_5fproto_2eproto_once,
      file_level_metadata_data_5fproto_2eproto[2]);
}

// ===================================================================

class LoginRequest::_Internal {
 public:
};

LoginRequest::LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:data.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_hash_){}
    , decltype(_impl_.device_info_){}
    , decltype(_impl_.app_version_){}
    , decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password_hash().empty()) {
    _this->_impl_.password_hash_.Set(from._internal_password_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.device_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_info().empty()) {
    _this->_impl_.device_info_.Set(from._internal_device_info(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_version().empty()) {
    _this->_impl_.app_version_.Set(from._internal_app_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:data.LoginRequest)
}

inline void LoginRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_hash_){}
    , decltype(_impl_.device_info_){}
    , decltype(_impl_.app_version_){}
    , decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:data.LoginRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.password_hash_.Destroy();
  _impl_.device_info_.Destroy();
  _impl_.app_version_.Destroy();
  _impl_.token_.Destroy();
}

void LoginRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:data.LoginRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.password_hash_.ClearToEmpty();
  _impl_.device_info_.ClearToEmpty();
  _impl_.app_version_.ClearToEmpty();
  _impl_.token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.LoginRequest.username"));
        } else
          goto handle_unusual;
        continue;
      // string password_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.LoginRequest.password_hash"));
        } else
          goto handle_unusual;
        continue;
      // string device_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_device_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.LoginRequest.device_info"));
        } else
          goto handle_unusual;
        continue;
      // string app_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_app_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.LoginRequest.app_version"));
        } else
          goto handle_unusual;
        continue;
      // string token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.LoginRequest.token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.LoginRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.LoginRequest.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string password_hash = 2;
  if (!this->_internal_password_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password_hash().data(), static_cast<int>(this->_internal_password_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.LoginRequest.password_hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password_hash(), target);
  }

  // string device_info = 3;
  if (!this->_internal_device_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_info().data(), static_cast<int>(this->_internal_device_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.LoginRequest.device_info");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_info(), target);
  }

  // string app_version = 4;
  if (!this->_internal_app_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_version().data(), static_cast<int>(this->_internal_app_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.LoginRequest.app_version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_app_version(), target);
  }

  // string token = 5;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.LoginRequest.token");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data.LoginRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password_hash = 2;
  if (!this->_internal_password_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password_hash());
  }

  // string device_info = 3;
  if (!this->_internal_device_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_info());
  }

  // string app_version = 4;
  if (!this->_internal_app_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_version());
  }

  // string token = 5;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginRequest::GetClassData() const { return &_class_data_; }


void LoginRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginRequest*>(&to_msg);
  auto& from = static_cast<const LoginRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:data.LoginRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_password_hash().empty()) {
    _this->_internal_set_password_hash(from._internal_password_hash());
  }
  if (!from._internal_device_info().empty()) {
    _this->_internal_set_device_info(from._internal_device_info());
  }
  if (!from._internal_app_version().empty()) {
    _this->_internal_set_app_version(from._internal_app_version());
  }
  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_hash_, lhs_arena,
      &other->_impl_.password_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_info_, lhs_arena,
      &other->_impl_.device_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_version_, lhs_arena,
      &other->_impl_.app_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fproto_2eproto_getter, &descriptor_table_data_5fproto_2eproto_once,
      file_level_metadata_data_5fproto_2eproto[3]);
}

// ===================================================================

class LoginResponse::_Internal {
 public:
};

LoginResponse::LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:data.LoginResponse)
}
LoginResponse::LoginResponse(const LoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.session_id_){}
    , decltype(_impl_.user_nickname_){}
    , decltype(_impl_.expire_time_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.user_role_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_nickname().empty()) {
    _this->_impl_.user_nickname_.Set(from._internal_user_nickname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.expire_time_, &from._impl_.expire_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_role_) -
    reinterpret_cast<char*>(&_impl_.expire_time_)) + sizeof(_impl_.user_role_));
  // @@protoc_insertion_point(copy_constructor:data.LoginResponse)
}

inline void LoginResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.session_id_){}
    , decltype(_impl_.user_nickname_){}
    , decltype(_impl_.expire_time_){uint64_t{0u}}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.user_role_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:data.LoginResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.session_id_.Destroy();
  _impl_.user_nickname_.Destroy();
}

void LoginResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:data.LoginResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_id_.ClearToEmpty();
  _impl_.user_nickname_.ClearToEmpty();
  ::memset(&_impl_.expire_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.user_role_) -
      reinterpret_cast<char*>(&_impl_.expire_time_)) + sizeof(_impl_.user_role_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.LoginResponse.session_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 expire_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.expire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_nickname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_user_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.LoginResponse.user_nickname"));
        } else
          goto handle_unusual;
        continue;
      // uint32 user_role = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.user_role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.LoginResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string session_id = 2;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.LoginResponse.session_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_id(), target);
  }

  // uint64 expire_time = 3;
  if (this->_internal_expire_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_expire_time(), target);
  }

  // string user_nickname = 4;
  if (!this->_internal_user_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_nickname().data(), static_cast<int>(this->_internal_user_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.LoginResponse.user_nickname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_nickname(), target);
  }

  // uint32 user_role = 5;
  if (this->_internal_user_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_user_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.LoginResponse)
  return target;
}

size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data.LoginResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id = 2;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string user_nickname = 4;
  if (!this->_internal_user_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_nickname());
  }

  // uint64 expire_time = 3;
  if (this->_internal_expire_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_expire_time());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 user_role = 5;
  if (this->_internal_user_role() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_role());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginResponse::GetClassData() const { return &_class_data_; }


void LoginResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginResponse*>(&to_msg);
  auto& from = static_cast<const LoginResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:data.LoginResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_user_nickname().empty()) {
    _this->_internal_set_user_nickname(from._internal_user_nickname());
  }
  if (from._internal_expire_time() != 0) {
    _this->_internal_set_expire_time(from._internal_expire_time());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_user_role() != 0) {
    _this->_internal_set_user_role(from._internal_user_role());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  return true;
}

void LoginResponse::InternalSwap(LoginResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_nickname_, lhs_arena,
      &other->_impl_.user_nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.user_role_)
      + sizeof(LoginResponse::_impl_.user_role_)
      - PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.expire_time_)>(
          reinterpret_cast<char*>(&_impl_.expire_time_),
          reinterpret_cast<char*>(&other->_impl_.expire_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fproto_2eproto_getter, &descriptor_table_data_5fproto_2eproto_once,
      file_level_metadata_data_5fproto_2eproto[4]);
}

// ===================================================================

class Heartbeat::_Internal {
 public:
};

Heartbeat::Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:data.Heartbeat)
}
Heartbeat::Heartbeat(const Heartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Heartbeat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_status_){}
    , decltype(_impl_.last_active_time_){}
    , decltype(_impl_.server_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.connection_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connection_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connection_status().empty()) {
    _this->_impl_.connection_status_.Set(from._internal_connection_status(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.last_active_time_, &from._impl_.last_active_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.server_time_) -
    reinterpret_cast<char*>(&_impl_.last_active_time_)) + sizeof(_impl_.server_time_));
  // @@protoc_insertion_point(copy_constructor:data.Heartbeat)
}

inline void Heartbeat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_status_){}
    , decltype(_impl_.last_active_time_){uint64_t{0u}}
    , decltype(_impl_.server_time_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.connection_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connection_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:data.Heartbeat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Heartbeat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connection_status_.Destroy();
}

void Heartbeat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:data.Heartbeat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connection_status_.ClearToEmpty();
  ::memset(&_impl_.last_active_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.server_time_) -
      reinterpret_cast<char*>(&_impl_.last_active_time_)) + sizeof(_impl_.server_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Heartbeat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 last_active_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.last_active_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 server_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string connection_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_connection_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.Heartbeat.connection_status"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Heartbeat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.Heartbeat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 last_active_time = 1;
  if (this->_internal_last_active_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_last_active_time(), target);
  }

  // uint64 server_time = 2;
  if (this->_internal_server_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_server_time(), target);
  }

  // string connection_status = 3;
  if (!this->_internal_connection_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connection_status().data(), static_cast<int>(this->_internal_connection_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.Heartbeat.connection_status");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_connection_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.Heartbeat)
  return target;
}

size_t Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data.Heartbeat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string connection_status = 3;
  if (!this->_internal_connection_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connection_status());
  }

  // uint64 last_active_time = 1;
  if (this->_internal_last_active_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_active_time());
  }

  // uint64 server_time = 2;
  if (this->_internal_server_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_server_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Heartbeat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Heartbeat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Heartbeat::GetClassData() const { return &_class_data_; }


void Heartbeat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Heartbeat*>(&to_msg);
  auto& from = static_cast<const Heartbeat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:data.Heartbeat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_connection_status().empty()) {
    _this->_internal_set_connection_status(from._internal_connection_status());
  }
  if (from._internal_last_active_time() != 0) {
    _this->_internal_set_last_active_time(from._internal_last_active_time());
  }
  if (from._internal_server_time() != 0) {
    _this->_internal_set_server_time(from._internal_server_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {
  return true;
}

void Heartbeat::InternalSwap(Heartbeat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.connection_status_, lhs_arena,
      &other->_impl_.connection_status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.server_time_)
      + sizeof(Heartbeat::_impl_.server_time_)
      - PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.last_active_time_)>(
          reinterpret_cast<char*>(&_impl_.last_active_time_),
          reinterpret_cast<char*>(&other->_impl_.last_active_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Heartbeat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fproto_2eproto_getter, &descriptor_table_data_5fproto_2eproto_once,
      file_level_metadata_data_5fproto_2eproto[5]);
}

// ===================================================================

class ErrorResponse::_Internal {
 public:
};

ErrorResponse::ErrorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:data.ErrorResponse)
}
ErrorResponse::ErrorResponse(const ErrorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ErrorResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.detail_){}
    , decltype(_impl_.solution_){}
    , decltype(_impl_.request_type_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.ErrorCode_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_detail().empty()) {
    _this->_impl_.detail_.Set(from._internal_detail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.solution_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.solution_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_solution().empty()) {
    _this->_impl_.solution_.Set(from._internal_solution(), 
      _this->GetArenaForAllocation());
  }
  _impl_.request_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_type().empty()) {
    _this->_impl_.request_type_.Set(from._internal_request_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  clear_has_ErrorCode();
  switch (from.ErrorCode_case()) {
    case kCommonCode: {
      _this->_internal_set_common_code(from._internal_common_code());
      break;
    }
    case kNetworkCode: {
      _this->_internal_set_network_code(from._internal_network_code());
      break;
    }
    case ERRORCODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:data.ErrorResponse)
}

inline void ErrorResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.detail_){}
    , decltype(_impl_.solution_){}
    , decltype(_impl_.request_type_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.ErrorCode_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.solution_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.solution_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.request_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_ErrorCode();
}

ErrorResponse::~ErrorResponse() {
  // @@protoc_insertion_point(destructor:data.ErrorResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ErrorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.detail_.Destroy();
  _impl_.solution_.Destroy();
  _impl_.request_type_.Destroy();
  _impl_.message_.Destroy();
  if (has_ErrorCode()) {
    clear_ErrorCode();
  }
}

void ErrorResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ErrorResponse::clear_ErrorCode() {
// @@protoc_insertion_point(one_of_clear_start:data.ErrorResponse)
  switch (ErrorCode_case()) {
    case kCommonCode: {
      // No need to clear
      break;
    }
    case kNetworkCode: {
      // No need to clear
      break;
    }
    case ERRORCODE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ERRORCODE_NOT_SET;
}


void ErrorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:data.ErrorResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.detail_.ClearToEmpty();
  _impl_.solution_.ClearToEmpty();
  _impl_.request_type_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  clear_ErrorCode();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .common.ErrorCode common_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_common_code(static_cast<::common::ErrorCode>(val));
        } else
          goto handle_unusual;
        continue;
      // .network.ErrorCode network_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_network_code(static_cast<::network::ErrorCode>(val));
        } else
          goto handle_unusual;
        continue;
      // string detail = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_detail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.ErrorResponse.detail"));
        } else
          goto handle_unusual;
        continue;
      // string solution = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_solution();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.ErrorResponse.solution"));
        } else
          goto handle_unusual;
        continue;
      // string request_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_request_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.ErrorResponse.request_type"));
        } else
          goto handle_unusual;
        continue;
      // string message = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.ErrorResponse.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ErrorResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.ErrorResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.ErrorCode common_code = 1;
  if (_internal_has_common_code()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_common_code(), target);
  }

  // .network.ErrorCode network_code = 2;
  if (_internal_has_network_code()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_network_code(), target);
  }

  // string detail = 3;
  if (!this->_internal_detail().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detail().data(), static_cast<int>(this->_internal_detail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.ErrorResponse.detail");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_detail(), target);
  }

  // string solution = 4;
  if (!this->_internal_solution().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_solution().data(), static_cast<int>(this->_internal_solution().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.ErrorResponse.solution");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_solution(), target);
  }

  // string request_type = 5;
  if (!this->_internal_request_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_type().data(), static_cast<int>(this->_internal_request_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.ErrorResponse.request_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_request_type(), target);
  }

  // string message = 13;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.ErrorResponse.message");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.ErrorResponse)
  return target;
}

size_t ErrorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data.ErrorResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string detail = 3;
  if (!this->_internal_detail().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detail());
  }

  // string solution = 4;
  if (!this->_internal_solution().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_solution());
  }

  // string request_type = 5;
  if (!this->_internal_request_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_type());
  }

  // string message = 13;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  switch (ErrorCode_case()) {
    // .common.ErrorCode common_code = 1;
    case kCommonCode: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_common_code());
      break;
    }
    // .network.ErrorCode network_code = 2;
    case kNetworkCode: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_network_code());
      break;
    }
    case ERRORCODE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ErrorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ErrorResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ErrorResponse::GetClassData() const { return &_class_data_; }


void ErrorResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ErrorResponse*>(&to_msg);
  auto& from = static_cast<const ErrorResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:data.ErrorResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_detail().empty()) {
    _this->_internal_set_detail(from._internal_detail());
  }
  if (!from._internal_solution().empty()) {
    _this->_internal_set_solution(from._internal_solution());
  }
  if (!from._internal_request_type().empty()) {
    _this->_internal_set_request_type(from._internal_request_type());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  switch (from.ErrorCode_case()) {
    case kCommonCode: {
      _this->_internal_set_common_code(from._internal_common_code());
      break;
    }
    case kNetworkCode: {
      _this->_internal_set_network_code(from._internal_network_code());
      break;
    }
    case ERRORCODE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ErrorResponse::CopyFrom(const ErrorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.ErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorResponse::IsInitialized() const {
  return true;
}

void ErrorResponse::InternalSwap(ErrorResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.detail_, lhs_arena,
      &other->_impl_.detail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.solution_, lhs_arena,
      &other->_impl_.solution_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_type_, lhs_arena,
      &other->_impl_.request_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.ErrorCode_, other->_impl_.ErrorCode_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fproto_2eproto_getter, &descriptor_table_data_5fproto_2eproto_once,
      file_level_metadata_data_5fproto_2eproto[6]);
}

// ===================================================================

class Notification::_Internal {
 public:
};

Notification::Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:data.Notification)
}
Notification::Notification(const Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Notification* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.need_ack_){}
    , decltype(_impl_.create_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.create_time_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.create_time_));
  // @@protoc_insertion_point(copy_constructor:data.Notification)
}

inline void Notification::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.need_ack_){false}
    , decltype(_impl_.create_time_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Notification::~Notification() {
  // @@protoc_insertion_point(destructor:data.Notification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void Notification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:data.Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.create_time_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.create_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Notification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .data.Notification.NotifyType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::data::Notification_NotifyType>(val));
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.Notification.content"));
        } else
          goto handle_unusual;
        continue;
      // uint64 create_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool need_ack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.need_ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .data.Notification.NotifyType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.Notification.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  // uint64 create_time = 3;
  if (this->_internal_create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_create_time(), target);
  }

  // bool need_ack = 4;
  if (this->_internal_need_ack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_need_ack(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.Notification)
  return target;
}

size_t Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data.Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // .data.Notification.NotifyType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool need_ack = 4;
  if (this->_internal_need_ack() != 0) {
    total_size += 1 + 1;
  }

  // uint64 create_time = 3;
  if (this->_internal_create_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_create_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Notification::GetClassData() const { return &_class_data_; }


void Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Notification*>(&to_msg);
  auto& from = static_cast<const Notification&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:data.Notification)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_need_ack() != 0) {
    _this->_internal_set_need_ack(from._internal_need_ack());
  }
  if (from._internal_create_time() != 0) {
    _this->_internal_set_create_time(from._internal_create_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Notification::CopyFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notification::IsInitialized() const {
  return true;
}

void Notification::InternalSwap(Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Notification, _impl_.create_time_)
      + sizeof(Notification::_impl_.create_time_)
      - PROTOBUF_FIELD_OFFSET(Notification, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Notification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fproto_2eproto_getter, &descriptor_table_data_5fproto_2eproto_once,
      file_level_metadata_data_5fproto_2eproto[7]);
}

// ===================================================================

class BatchRequest::_Internal {
 public:
};

BatchRequest::BatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:data.BatchRequest)
}
BatchRequest::BatchRequest(const BatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sub_requests_){from._impl_.sub_requests_}
    , decltype(_impl_.need_atomic_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.need_atomic_ = from._impl_.need_atomic_;
  // @@protoc_insertion_point(copy_constructor:data.BatchRequest)
}

inline void BatchRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sub_requests_){arena}
    , decltype(_impl_.need_atomic_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BatchRequest::~BatchRequest() {
  // @@protoc_insertion_point(destructor:data.BatchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sub_requests_.~RepeatedPtrField();
}

void BatchRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:data.BatchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sub_requests_.Clear();
  _impl_.need_atomic_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .data.MessageFrame sub_requests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sub_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool need_atomic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.need_atomic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.BatchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .data.MessageFrame sub_requests = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sub_requests_size()); i < n; i++) {
    const auto& repfield = this->_internal_sub_requests(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool need_atomic = 2;
  if (this->_internal_need_atomic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_need_atomic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.BatchRequest)
  return target;
}

size_t BatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data.BatchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .data.MessageFrame sub_requests = 1;
  total_size += 1UL * this->_internal_sub_requests_size();
  for (const auto& msg : this->_impl_.sub_requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool need_atomic = 2;
  if (this->_internal_need_atomic() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchRequest::GetClassData() const { return &_class_data_; }


void BatchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchRequest*>(&to_msg);
  auto& from = static_cast<const BatchRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:data.BatchRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sub_requests_.MergeFrom(from._impl_.sub_requests_);
  if (from._internal_need_atomic() != 0) {
    _this->_internal_set_need_atomic(from._internal_need_atomic());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchRequest::CopyFrom(const BatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.BatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchRequest::IsInitialized() const {
  return true;
}

void BatchRequest::InternalSwap(BatchRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sub_requests_.InternalSwap(&other->_impl_.sub_requests_);
  swap(_impl_.need_atomic_, other->_impl_.need_atomic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fproto_2eproto_getter, &descriptor_table_data_5fproto_2eproto_once,
      file_level_metadata_data_5fproto_2eproto[8]);
}

// ===================================================================

SaveSourceCodeRequest_MetadataEntry_DoNotUse::SaveSourceCodeRequest_MetadataEntry_DoNotUse() {}
SaveSourceCodeRequest_MetadataEntry_DoNotUse::SaveSourceCodeRequest_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SaveSourceCodeRequest_MetadataEntry_DoNotUse::MergeFrom(const SaveSourceCodeRequest_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SaveSourceCodeRequest_MetadataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fproto_2eproto_getter, &descriptor_table_data_5fproto_2eproto_once,
      file_level_metadata_data_5fproto_2eproto[9]);
}

// ===================================================================

class SaveSourceCodeRequest::_Internal {
 public:
};

SaveSourceCodeRequest::SaveSourceCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SaveSourceCodeRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:data.SaveSourceCodeRequest)
}
SaveSourceCodeRequest::SaveSourceCodeRequest(const SaveSourceCodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SaveSourceCodeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.metadata_)*/{}
    , decltype(_impl_.code_id_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.source_code_){}
    , decltype(_impl_.code_name_){}
    , decltype(_impl_.description_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  _impl_.code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code_id().empty()) {
    _this->_impl_.code_id_.Set(from._internal_code_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_code().empty()) {
    _this->_impl_.source_code_.Set(from._internal_source_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code_name().empty()) {
    _this->_impl_.code_name_.Set(from._internal_code_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:data.SaveSourceCodeRequest)
}

inline void SaveSourceCodeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.metadata_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.code_id_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.source_code_){}
    , decltype(_impl_.code_name_){}
    , decltype(_impl_.description_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SaveSourceCodeRequest::~SaveSourceCodeRequest() {
  // @@protoc_insertion_point(destructor:data.SaveSourceCodeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SaveSourceCodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadata_.Destruct();
  _impl_.metadata_.~MapField();
  _impl_.code_id_.Destroy();
  _impl_.language_.Destroy();
  _impl_.source_code_.Destroy();
  _impl_.code_name_.Destroy();
  _impl_.description_.Destroy();
}

void SaveSourceCodeRequest::ArenaDtor(void* object) {
  SaveSourceCodeRequest* _this = reinterpret_cast< SaveSourceCodeRequest* >(object);
  _this->_impl_.metadata_.Destruct();
}
void SaveSourceCodeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SaveSourceCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:data.SaveSourceCodeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.Clear();
  _impl_.code_id_.ClearToEmpty();
  _impl_.language_.ClearToEmpty();
  _impl_.source_code_.ClearToEmpty();
  _impl_.code_name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveSourceCodeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.SaveSourceCodeRequest.code_id"));
        } else
          goto handle_unusual;
        continue;
      // string language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.SaveSourceCodeRequest.language"));
        } else
          goto handle_unusual;
        continue;
      // string source_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_source_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.SaveSourceCodeRequest.source_code"));
        } else
          goto handle_unusual;
        continue;
      // string code_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_code_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.SaveSourceCodeRequest.code_name"));
        } else
          goto handle_unusual;
        continue;
      // string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.SaveSourceCodeRequest.description"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SaveSourceCodeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.SaveSourceCodeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code_id = 1;
  if (!this->_internal_code_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code_id().data(), static_cast<int>(this->_internal_code_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.SaveSourceCodeRequest.code_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code_id(), target);
  }

  // string language = 2;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.SaveSourceCodeRequest.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  // string source_code = 3;
  if (!this->_internal_source_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_code().data(), static_cast<int>(this->_internal_source_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.SaveSourceCodeRequest.source_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_source_code(), target);
  }

  // string code_name = 4;
  if (!this->_internal_code_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code_name().data(), static_cast<int>(this->_internal_code_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.SaveSourceCodeRequest.code_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_code_name(), target);
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.SaveSourceCodeRequest.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // map<string, string> metadata = 6;
  if (!this->_internal_metadata().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = SaveSourceCodeRequest_MetadataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_metadata();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "data.SaveSourceCodeRequest.MetadataEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "data.SaveSourceCodeRequest.MetadataEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.SaveSourceCodeRequest)
  return target;
}

size_t SaveSourceCodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data.SaveSourceCodeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> metadata = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += SaveSourceCodeRequest_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string code_id = 1;
  if (!this->_internal_code_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code_id());
  }

  // string language = 2;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // string source_code = 3;
  if (!this->_internal_source_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_code());
  }

  // string code_name = 4;
  if (!this->_internal_code_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code_name());
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaveSourceCodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SaveSourceCodeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaveSourceCodeRequest::GetClassData() const { return &_class_data_; }


void SaveSourceCodeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SaveSourceCodeRequest*>(&to_msg);
  auto& from = static_cast<const SaveSourceCodeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:data.SaveSourceCodeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  if (!from._internal_code_id().empty()) {
    _this->_internal_set_code_id(from._internal_code_id());
  }
  if (!from._internal_language().empty()) {
    _this->_internal_set_language(from._internal_language());
  }
  if (!from._internal_source_code().empty()) {
    _this->_internal_set_source_code(from._internal_source_code());
  }
  if (!from._internal_code_name().empty()) {
    _this->_internal_set_code_name(from._internal_code_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaveSourceCodeRequest::CopyFrom(const SaveSourceCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.SaveSourceCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveSourceCodeRequest::IsInitialized() const {
  return true;
}

void SaveSourceCodeRequest::InternalSwap(SaveSourceCodeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_id_, lhs_arena,
      &other->_impl_.code_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_code_, lhs_arena,
      &other->_impl_.source_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_name_, lhs_arena,
      &other->_impl_.code_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveSourceCodeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fproto_2eproto_getter, &descriptor_table_data_5fproto_2eproto_once,
      file_level_metadata_data_5fproto_2eproto[10]);
}

// ===================================================================

class SaveSourceCodeResponse::_Internal {
 public:
};

SaveSourceCodeResponse::SaveSourceCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:data.SaveSourceCodeResponse)
}
SaveSourceCodeResponse::SaveSourceCodeResponse(const SaveSourceCodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SaveSourceCodeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_id_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.save_time_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code_id().empty()) {
    _this->_impl_.code_id_.Set(from._internal_code_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.save_time_, &from._impl_.save_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.save_time_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:data.SaveSourceCodeResponse)
}

inline void SaveSourceCodeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_id_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.save_time_){uint64_t{0u}}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SaveSourceCodeResponse::~SaveSourceCodeResponse() {
  // @@protoc_insertion_point(destructor:data.SaveSourceCodeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SaveSourceCodeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_id_.Destroy();
  _impl_.message_.Destroy();
}

void SaveSourceCodeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SaveSourceCodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:data.SaveSourceCodeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_id_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.save_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.save_time_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveSourceCodeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string code_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.SaveSourceCodeResponse.code_id"));
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.SaveSourceCodeResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // uint64 save_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.save_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SaveSourceCodeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.SaveSourceCodeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string code_id = 2;
  if (!this->_internal_code_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code_id().data(), static_cast<int>(this->_internal_code_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.SaveSourceCodeResponse.code_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code_id(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.SaveSourceCodeResponse.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // uint64 save_time = 4;
  if (this->_internal_save_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_save_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.SaveSourceCodeResponse)
  return target;
}

size_t SaveSourceCodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data.SaveSourceCodeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code_id = 2;
  if (!this->_internal_code_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code_id());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // uint64 save_time = 4;
  if (this->_internal_save_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_save_time());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaveSourceCodeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SaveSourceCodeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaveSourceCodeResponse::GetClassData() const { return &_class_data_; }


void SaveSourceCodeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SaveSourceCodeResponse*>(&to_msg);
  auto& from = static_cast<const SaveSourceCodeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:data.SaveSourceCodeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code_id().empty()) {
    _this->_internal_set_code_id(from._internal_code_id());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_save_time() != 0) {
    _this->_internal_set_save_time(from._internal_save_time());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaveSourceCodeResponse::CopyFrom(const SaveSourceCodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.SaveSourceCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveSourceCodeResponse::IsInitialized() const {
  return true;
}

void SaveSourceCodeResponse::InternalSwap(SaveSourceCodeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_id_, lhs_arena,
      &other->_impl_.code_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SaveSourceCodeResponse, _impl_.success_)
      + sizeof(SaveSourceCodeResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(SaveSourceCodeResponse, _impl_.save_time_)>(
          reinterpret_cast<char*>(&_impl_.save_time_),
          reinterpret_cast<char*>(&other->_impl_.save_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveSourceCodeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fproto_2eproto_getter, &descriptor_table_data_5fproto_2eproto_once,
      file_level_metadata_data_5fproto_2eproto[11]);
}

// ===================================================================

class CompileSourceCodeRequest::_Internal {
 public:
};

CompileSourceCodeRequest::CompileSourceCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:data.CompileSourceCodeRequest)
}
CompileSourceCodeRequest::CompileSourceCodeRequest(const CompileSourceCodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompileSourceCodeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_id_){}
    , decltype(_impl_.compiler_options_){}
    , decltype(_impl_.target_ir_version_){}
    , decltype(_impl_.optimize_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code_id().empty()) {
    _this->_impl_.code_id_.Set(from._internal_code_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.compiler_options_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.compiler_options_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_compiler_options().empty()) {
    _this->_impl_.compiler_options_.Set(from._internal_compiler_options(), 
      _this->GetArenaForAllocation());
  }
  _impl_.target_ir_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_ir_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_ir_version().empty()) {
    _this->_impl_.target_ir_version_.Set(from._internal_target_ir_version(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.optimize_ = from._impl_.optimize_;
  // @@protoc_insertion_point(copy_constructor:data.CompileSourceCodeRequest)
}

inline void CompileSourceCodeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_id_){}
    , decltype(_impl_.compiler_options_){}
    , decltype(_impl_.target_ir_version_){}
    , decltype(_impl_.optimize_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.compiler_options_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.compiler_options_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_ir_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_ir_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompileSourceCodeRequest::~CompileSourceCodeRequest() {
  // @@protoc_insertion_point(destructor:data.CompileSourceCodeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompileSourceCodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_id_.Destroy();
  _impl_.compiler_options_.Destroy();
  _impl_.target_ir_version_.Destroy();
}

void CompileSourceCodeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompileSourceCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:data.CompileSourceCodeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_id_.ClearToEmpty();
  _impl_.compiler_options_.ClearToEmpty();
  _impl_.target_ir_version_.ClearToEmpty();
  _impl_.optimize_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompileSourceCodeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.CompileSourceCodeRequest.code_id"));
        } else
          goto handle_unusual;
        continue;
      // string compiler_options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_compiler_options();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.CompileSourceCodeRequest.compiler_options"));
        } else
          goto handle_unusual;
        continue;
      // bool optimize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.optimize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string target_ir_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_target_ir_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.CompileSourceCodeRequest.target_ir_version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompileSourceCodeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.CompileSourceCodeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code_id = 1;
  if (!this->_internal_code_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code_id().data(), static_cast<int>(this->_internal_code_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.CompileSourceCodeRequest.code_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code_id(), target);
  }

  // string compiler_options = 2;
  if (!this->_internal_compiler_options().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_compiler_options().data(), static_cast<int>(this->_internal_compiler_options().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.CompileSourceCodeRequest.compiler_options");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_compiler_options(), target);
  }

  // bool optimize = 3;
  if (this->_internal_optimize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_optimize(), target);
  }

  // string target_ir_version = 4;
  if (!this->_internal_target_ir_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_ir_version().data(), static_cast<int>(this->_internal_target_ir_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.CompileSourceCodeRequest.target_ir_version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_target_ir_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.CompileSourceCodeRequest)
  return target;
}

size_t CompileSourceCodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data.CompileSourceCodeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code_id = 1;
  if (!this->_internal_code_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code_id());
  }

  // string compiler_options = 2;
  if (!this->_internal_compiler_options().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_compiler_options());
  }

  // string target_ir_version = 4;
  if (!this->_internal_target_ir_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_ir_version());
  }

  // bool optimize = 3;
  if (this->_internal_optimize() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompileSourceCodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompileSourceCodeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompileSourceCodeRequest::GetClassData() const { return &_class_data_; }


void CompileSourceCodeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompileSourceCodeRequest*>(&to_msg);
  auto& from = static_cast<const CompileSourceCodeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:data.CompileSourceCodeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code_id().empty()) {
    _this->_internal_set_code_id(from._internal_code_id());
  }
  if (!from._internal_compiler_options().empty()) {
    _this->_internal_set_compiler_options(from._internal_compiler_options());
  }
  if (!from._internal_target_ir_version().empty()) {
    _this->_internal_set_target_ir_version(from._internal_target_ir_version());
  }
  if (from._internal_optimize() != 0) {
    _this->_internal_set_optimize(from._internal_optimize());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompileSourceCodeRequest::CopyFrom(const CompileSourceCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.CompileSourceCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompileSourceCodeRequest::IsInitialized() const {
  return true;
}

void CompileSourceCodeRequest::InternalSwap(CompileSourceCodeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_id_, lhs_arena,
      &other->_impl_.code_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.compiler_options_, lhs_arena,
      &other->_impl_.compiler_options_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_ir_version_, lhs_arena,
      &other->_impl_.target_ir_version_, rhs_arena
  );
  swap(_impl_.optimize_, other->_impl_.optimize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompileSourceCodeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fproto_2eproto_getter, &descriptor_table_data_5fproto_2eproto_once,
      file_level_metadata_data_5fproto_2eproto[12]);
}

// ===================================================================

class CompileSourceCodeResponse::_Internal {
 public:
};

CompileSourceCodeResponse::CompileSourceCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:data.CompileSourceCodeResponse)
}
CompileSourceCodeResponse::CompileSourceCodeResponse(const CompileSourceCodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompileSourceCodeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.warnings_){from._impl_.warnings_}
    , decltype(_impl_.ir_code_id_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.compile_duration_){}
    , decltype(_impl_.compile_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ir_code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ir_code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ir_code_id().empty()) {
    _this->_impl_.ir_code_id_.Set(from._internal_ir_code_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.compile_time_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.compile_time_));
  // @@protoc_insertion_point(copy_constructor:data.CompileSourceCodeResponse)
}

inline void CompileSourceCodeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.warnings_){arena}
    , decltype(_impl_.ir_code_id_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.compile_duration_){0u}
    , decltype(_impl_.compile_time_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ir_code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ir_code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompileSourceCodeResponse::~CompileSourceCodeResponse() {
  // @@protoc_insertion_point(destructor:data.CompileSourceCodeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompileSourceCodeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.warnings_.~RepeatedPtrField();
  _impl_.ir_code_id_.Destroy();
  _impl_.message_.Destroy();
}

void CompileSourceCodeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompileSourceCodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:data.CompileSourceCodeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.warnings_.Clear();
  _impl_.ir_code_id_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.compile_time_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.compile_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompileSourceCodeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ir_code_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ir_code_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.CompileSourceCodeResponse.ir_code_id"));
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.CompileSourceCodeResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // uint64 compile_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.compile_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 compile_duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.compile_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string warnings = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_warnings();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "data.CompileSourceCodeResponse.warnings"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompileSourceCodeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.CompileSourceCodeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string ir_code_id = 2;
  if (!this->_internal_ir_code_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ir_code_id().data(), static_cast<int>(this->_internal_ir_code_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.CompileSourceCodeResponse.ir_code_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ir_code_id(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.CompileSourceCodeResponse.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // uint64 compile_time = 4;
  if (this->_internal_compile_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_compile_time(), target);
  }

  // uint32 compile_duration = 5;
  if (this->_internal_compile_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_compile_duration(), target);
  }

  // repeated string warnings = 6;
  for (int i = 0, n = this->_internal_warnings_size(); i < n; i++) {
    const auto& s = this->_internal_warnings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.CompileSourceCodeResponse.warnings");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.CompileSourceCodeResponse)
  return target;
}

size_t CompileSourceCodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data.CompileSourceCodeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string warnings = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.warnings_.size());
  for (int i = 0, n = _impl_.warnings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.warnings_.Get(i));
  }

  // string ir_code_id = 2;
  if (!this->_internal_ir_code_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ir_code_id());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 compile_duration = 5;
  if (this->_internal_compile_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_compile_duration());
  }

  // uint64 compile_time = 4;
  if (this->_internal_compile_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_compile_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompileSourceCodeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompileSourceCodeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompileSourceCodeResponse::GetClassData() const { return &_class_data_; }


void CompileSourceCodeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompileSourceCodeResponse*>(&to_msg);
  auto& from = static_cast<const CompileSourceCodeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:data.CompileSourceCodeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.warnings_.MergeFrom(from._impl_.warnings_);
  if (!from._internal_ir_code_id().empty()) {
    _this->_internal_set_ir_code_id(from._internal_ir_code_id());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_compile_duration() != 0) {
    _this->_internal_set_compile_duration(from._internal_compile_duration());
  }
  if (from._internal_compile_time() != 0) {
    _this->_internal_set_compile_time(from._internal_compile_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompileSourceCodeResponse::CopyFrom(const CompileSourceCodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.CompileSourceCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompileSourceCodeResponse::IsInitialized() const {
  return true;
}

void CompileSourceCodeResponse::InternalSwap(CompileSourceCodeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.warnings_.InternalSwap(&other->_impl_.warnings_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ir_code_id_, lhs_arena,
      &other->_impl_.ir_code_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompileSourceCodeResponse, _impl_.compile_time_)
      + sizeof(CompileSourceCodeResponse::_impl_.compile_time_)
      - PROTOBUF_FIELD_OFFSET(CompileSourceCodeResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompileSourceCodeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fproto_2eproto_getter, &descriptor_table_data_5fproto_2eproto_once,
      file_level_metadata_data_5fproto_2eproto[13]);
}

// ===================================================================

ExecuteIRCodeRequest_ParametersEntry_DoNotUse::ExecuteIRCodeRequest_ParametersEntry_DoNotUse() {}
ExecuteIRCodeRequest_ParametersEntry_DoNotUse::ExecuteIRCodeRequest_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ExecuteIRCodeRequest_ParametersEntry_DoNotUse::MergeFrom(const ExecuteIRCodeRequest_ParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ExecuteIRCodeRequest_ParametersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fproto_2eproto_getter, &descriptor_table_data_5fproto_2eproto_once,
      file_level_metadata_data_5fproto_2eproto[14]);
}

// ===================================================================

class ExecuteIRCodeRequest::_Internal {
 public:
};

ExecuteIRCodeRequest::ExecuteIRCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ExecuteIRCodeRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:data.ExecuteIRCodeRequest)
}
ExecuteIRCodeRequest::ExecuteIRCodeRequest(const ExecuteIRCodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecuteIRCodeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.parameters_)*/{}
    , decltype(_impl_.ir_code_id_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.timeout_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.parameters_.MergeFrom(from._impl_.parameters_);
  _impl_.ir_code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ir_code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ir_code_id().empty()) {
    _this->_impl_.ir_code_id_.Set(from._internal_ir_code_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mode_, &from._impl_.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timeout_) -
    reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.timeout_));
  // @@protoc_insertion_point(copy_constructor:data.ExecuteIRCodeRequest)
}

inline void ExecuteIRCodeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.parameters_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.ir_code_id_){}
    , decltype(_impl_.mode_){0}
    , decltype(_impl_.timeout_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ir_code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ir_code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecuteIRCodeRequest::~ExecuteIRCodeRequest() {
  // @@protoc_insertion_point(destructor:data.ExecuteIRCodeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ExecuteIRCodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parameters_.Destruct();
  _impl_.parameters_.~MapField();
  _impl_.ir_code_id_.Destroy();
}

void ExecuteIRCodeRequest::ArenaDtor(void* object) {
  ExecuteIRCodeRequest* _this = reinterpret_cast< ExecuteIRCodeRequest* >(object);
  _this->_impl_.parameters_.Destruct();
}
void ExecuteIRCodeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecuteIRCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:data.ExecuteIRCodeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parameters_.Clear();
  _impl_.ir_code_id_.ClearToEmpty();
  ::memset(&_impl_.mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timeout_) -
      reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.timeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteIRCodeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ir_code_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ir_code_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.ExecuteIRCodeRequest.ir_code_id"));
        } else
          goto handle_unusual;
        continue;
      // .data.ExecuteIRCodeRequest.ExecutionMode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::data::ExecuteIRCodeRequest_ExecutionMode>(val));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 timeout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecuteIRCodeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.ExecuteIRCodeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ir_code_id = 1;
  if (!this->_internal_ir_code_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ir_code_id().data(), static_cast<int>(this->_internal_ir_code_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.ExecuteIRCodeRequest.ir_code_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ir_code_id(), target);
  }

  // .data.ExecuteIRCodeRequest.ExecutionMode mode = 2;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode(), target);
  }

  // map<string, string> parameters = 3;
  if (!this->_internal_parameters().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = ExecuteIRCodeRequest_ParametersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_parameters();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "data.ExecuteIRCodeRequest.ParametersEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "data.ExecuteIRCodeRequest.ParametersEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // uint32 timeout = 4;
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.ExecuteIRCodeRequest)
  return target;
}

size_t ExecuteIRCodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data.ExecuteIRCodeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> parameters = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_parameters().begin();
      it != this->_internal_parameters().end(); ++it) {
    total_size += ExecuteIRCodeRequest_ParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string ir_code_id = 1;
  if (!this->_internal_ir_code_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ir_code_id());
  }

  // .data.ExecuteIRCodeRequest.ExecutionMode mode = 2;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // uint32 timeout = 4;
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteIRCodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecuteIRCodeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteIRCodeRequest::GetClassData() const { return &_class_data_; }


void ExecuteIRCodeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecuteIRCodeRequest*>(&to_msg);
  auto& from = static_cast<const ExecuteIRCodeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:data.ExecuteIRCodeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.parameters_.MergeFrom(from._impl_.parameters_);
  if (!from._internal_ir_code_id().empty()) {
    _this->_internal_set_ir_code_id(from._internal_ir_code_id());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_timeout() != 0) {
    _this->_internal_set_timeout(from._internal_timeout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteIRCodeRequest::CopyFrom(const ExecuteIRCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.ExecuteIRCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteIRCodeRequest::IsInitialized() const {
  return true;
}

void ExecuteIRCodeRequest::InternalSwap(ExecuteIRCodeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.parameters_.InternalSwap(&other->_impl_.parameters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ir_code_id_, lhs_arena,
      &other->_impl_.ir_code_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecuteIRCodeRequest, _impl_.timeout_)
      + sizeof(ExecuteIRCodeRequest::_impl_.timeout_)
      - PROTOBUF_FIELD_OFFSET(ExecuteIRCodeRequest, _impl_.mode_)>(
          reinterpret_cast<char*>(&_impl_.mode_),
          reinterpret_cast<char*>(&other->_impl_.mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteIRCodeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fproto_2eproto_getter, &descriptor_table_data_5fproto_2eproto_once,
      file_level_metadata_data_5fproto_2eproto[15]);
}

// ===================================================================

class ExecuteIRCodeResponse::_Internal {
 public:
};

ExecuteIRCodeResponse::ExecuteIRCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:data.ExecuteIRCodeResponse)
}
ExecuteIRCodeResponse::ExecuteIRCodeResponse(const ExecuteIRCodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecuteIRCodeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.execution_result_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.execution_mode_used_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.execution_duration_){}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.end_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.execution_result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.execution_result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execution_result().empty()) {
    _this->_impl_.execution_result_.Set(from._internal_execution_result(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.execution_mode_used_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.execution_mode_used_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execution_mode_used().empty()) {
    _this->_impl_.execution_mode_used_.Set(from._internal_execution_mode_used(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_time_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.end_time_));
  // @@protoc_insertion_point(copy_constructor:data.ExecuteIRCodeResponse)
}

inline void ExecuteIRCodeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.execution_result_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.execution_mode_used_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.execution_duration_){0u}
    , decltype(_impl_.start_time_){uint64_t{0u}}
    , decltype(_impl_.end_time_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.execution_result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.execution_result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.execution_mode_used_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.execution_mode_used_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecuteIRCodeResponse::~ExecuteIRCodeResponse() {
  // @@protoc_insertion_point(destructor:data.ExecuteIRCodeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecuteIRCodeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.execution_result_.Destroy();
  _impl_.error_message_.Destroy();
  _impl_.execution_mode_used_.Destroy();
}

void ExecuteIRCodeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecuteIRCodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:data.ExecuteIRCodeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.execution_result_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  _impl_.execution_mode_used_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.end_time_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.end_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteIRCodeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string execution_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_execution_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.ExecuteIRCodeResponse.execution_result"));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.ExecuteIRCodeResponse.error_message"));
        } else
          goto handle_unusual;
        continue;
      // uint64 start_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 end_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 execution_duration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.execution_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string execution_mode_used = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_execution_mode_used();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "data.ExecuteIRCodeResponse.execution_mode_used"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecuteIRCodeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.ExecuteIRCodeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string execution_result = 2;
  if (!this->_internal_execution_result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_execution_result().data(), static_cast<int>(this->_internal_execution_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.ExecuteIRCodeResponse.execution_result");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_execution_result(), target);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.ExecuteIRCodeResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  // uint64 start_time = 4;
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_start_time(), target);
  }

  // uint64 end_time = 5;
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_end_time(), target);
  }

  // uint32 execution_duration = 6;
  if (this->_internal_execution_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_execution_duration(), target);
  }

  // string execution_mode_used = 7;
  if (!this->_internal_execution_mode_used().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_execution_mode_used().data(), static_cast<int>(this->_internal_execution_mode_used().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data.ExecuteIRCodeResponse.execution_mode_used");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_execution_mode_used(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.ExecuteIRCodeResponse)
  return target;
}

size_t ExecuteIRCodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data.ExecuteIRCodeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string execution_result = 2;
  if (!this->_internal_execution_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_execution_result());
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // string execution_mode_used = 7;
  if (!this->_internal_execution_mode_used().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_execution_mode_used());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 execution_duration = 6;
  if (this->_internal_execution_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_execution_duration());
  }

  // uint64 start_time = 4;
  if (this->_internal_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start_time());
  }

  // uint64 end_time = 5;
  if (this->_internal_end_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_end_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteIRCodeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecuteIRCodeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteIRCodeResponse::GetClassData() const { return &_class_data_; }


void ExecuteIRCodeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecuteIRCodeResponse*>(&to_msg);
  auto& from = static_cast<const ExecuteIRCodeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:data.ExecuteIRCodeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_execution_result().empty()) {
    _this->_internal_set_execution_result(from._internal_execution_result());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (!from._internal_execution_mode_used().empty()) {
    _this->_internal_set_execution_mode_used(from._internal_execution_mode_used());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_execution_duration() != 0) {
    _this->_internal_set_execution_duration(from._internal_execution_duration());
  }
  if (from._internal_start_time() != 0) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_end_time() != 0) {
    _this->_internal_set_end_time(from._internal_end_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteIRCodeResponse::CopyFrom(const ExecuteIRCodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.ExecuteIRCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteIRCodeResponse::IsInitialized() const {
  return true;
}

void ExecuteIRCodeResponse::InternalSwap(ExecuteIRCodeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.execution_result_, lhs_arena,
      &other->_impl_.execution_result_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.execution_mode_used_, lhs_arena,
      &other->_impl_.execution_mode_used_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecuteIRCodeResponse, _impl_.end_time_)
      + sizeof(ExecuteIRCodeResponse::_impl_.end_time_)
      - PROTOBUF_FIELD_OFFSET(ExecuteIRCodeResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteIRCodeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fproto_2eproto_getter, &descriptor_table_data_5fproto_2eproto_once,
      file_level_metadata_data_5fproto_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace data
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::data::RequestHeader*
Arena::CreateMaybeMessage< ::data::RequestHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::data::RequestHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::data::ResponseHeader*
Arena::CreateMaybeMessage< ::data::ResponseHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::data::ResponseHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::data::MessageFrame*
Arena::CreateMaybeMessage< ::data::MessageFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::data::MessageFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::data::LoginRequest*
Arena::CreateMaybeMessage< ::data::LoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::data::LoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::data::LoginResponse*
Arena::CreateMaybeMessage< ::data::LoginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::data::LoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::data::Heartbeat*
Arena::CreateMaybeMessage< ::data::Heartbeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::data::Heartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::data::ErrorResponse*
Arena::CreateMaybeMessage< ::data::ErrorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::data::ErrorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::data::Notification*
Arena::CreateMaybeMessage< ::data::Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::data::Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::data::BatchRequest*
Arena::CreateMaybeMessage< ::data::BatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::data::BatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::data::SaveSourceCodeRequest_MetadataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::data::SaveSourceCodeRequest_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::data::SaveSourceCodeRequest_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::data::SaveSourceCodeRequest*
Arena::CreateMaybeMessage< ::data::SaveSourceCodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::data::SaveSourceCodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::data::SaveSourceCodeResponse*
Arena::CreateMaybeMessage< ::data::SaveSourceCodeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::data::SaveSourceCodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::data::CompileSourceCodeRequest*
Arena::CreateMaybeMessage< ::data::CompileSourceCodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::data::CompileSourceCodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::data::CompileSourceCodeResponse*
Arena::CreateMaybeMessage< ::data::CompileSourceCodeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::data::CompileSourceCodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::data::ExecuteIRCodeRequest_ParametersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::data::ExecuteIRCodeRequest_ParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::data::ExecuteIRCodeRequest_ParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::data::ExecuteIRCodeRequest*
Arena::CreateMaybeMessage< ::data::ExecuteIRCodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::data::ExecuteIRCodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::data::ExecuteIRCodeResponse*
Arena::CreateMaybeMessage< ::data::ExecuteIRCodeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::data::ExecuteIRCodeResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
